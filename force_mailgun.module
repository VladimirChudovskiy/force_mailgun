<?php

/**
 * Implements hook_module_implements_alter()
 */
function force_mailgun_module_implements_alter(&$implementations, $hook){

    if($hook == 'cron_queue_info'){
        unset($implementations['mailgun']);
    }
}

/**
 * Implements hook_cron_queue_info()
 */
function force_mailgun_cron_queue_info() {
    $queues = array();
    $queues['mailgun_queue'] = array(
        'worker callback' => 'force_mailgun_send',
        'time' => 60,
    );
    return $queues;
}

//mailgun-admin-settings
/**
 * Implements hook_form_FORM_ID_alter()
 */
function force_mailgun_form_mailgun_admin_settings_alter(&$form, &$form_state, $form_id){
    $form['mailgun_test_mode'] = array(
        '#title' => t('Mailgun test mode'),
        '#type' => 'checkbox',
        '#description' => t('Imitation Mailgun API service down'),
        '#default_value' => variable_get('mailgun_test_mode', FALSE),
    );
}

/**
 * Send an e-mail using the Mailgun API.
 *
 * @param array $mailgun_message
 *   A Mailgun message array. Contains the following keys:
 *   - from: The e-mail addressthe message will be sent from.
 *   - to: The e-mail addressthe message will be sent to.
 *   - subject: The subject of the message.
 *   - text: The plain-text version of the message. Processed using check_plain().
 *   - html: The original message content. May contain HTML tags.
 *   - cc: One or more carbon copy recipients. If multiple, separate with commas.
 *   - bcc: One or more blind carbon copy recipients. If multiple, separate with commas.
 *   - o:tag: An array containing the tags to add to the message. See: https://documentation.mailgun.com/user_manual.html#tagging.
 *   - o:campaign: The campaign ID this message belongs to. See: https://documentation.mailgun.com/user_manual.html#um-campaign-analytics.
 *   - o:deliverytime: Desired time of delivery. Messages can be scheduled for a maximum of 3 days in the future. See: https://documentation.mailgun.com/api-intro.html#date-format.
 *   - o:dkim: Boolean indicating whether or not to enable DKIM signatures on per-message basis.
 *   - o:testmode: Boolean indicating whether or not to enable test mode. See: https://documentation.mailgun.com/user_manual.html#manual-testmode.
 *   - o:tracking: Boolean indicating whether or not to toggle tracking on a per-message basis. See: https://documentation.mailgun.com/user_manual.html#tracking-messages.
 *   - o:tracking-clicks: Boolean or string "htmlonly" indicating whether or not to toggle clicks tracking on a per-message basis. Has higher priority than domain-level setting.
 *   - o:tracking-opens: Boolean indicating whether or not to toggle clicks tracking on a per-message basis. Has higher priority than domain-level setting.
 *   - h:X-My-Header: h: prefix followed by an arbitrary value allows to append a custom MIME header to the message (X-My-Header in this case). For example, h:Reply-To to specify Reply-To address.
 *   - v:my-var: v: prefix followed by an arbitrary name allows to attach a custom JSON data to the message. See: https://documentation.mailgun.com/user_manual.html#manual-customdata.
 *
 * @return bool
 *   TRUE if the mail was successfully accepted, FALSE otherwise.
 */
function force_mailgun_send($mailgun_message) {
    $key = variable_get('mailgun_api_key', '');
    $service_up = true;
    if(variable_get('mailgun_test_mode', false)){
        $service_up = false;
    }

    // Extract the domain from the sender's email address. Use regular expression to check since it could be either a plain email address or in the form "Name <example@example.com>".
    $tokens = (preg_match('/^\s*(.+?)\s*<\s*([^>]+)\s*>$/', $mailgun_message['from'], $matches) === 1) ? explode('@', $matches[2]) : explode('@', $mailgun_message['from']);
    $mail_domain = array_pop($tokens);

    $client = mailgun_get_client();
    if (!$client OR !$service_up) {
        $queue = DrupalQueue::get('mailgun_queue', TRUE);
        $queue->createItem($mailgun_message);

        if(!$service_up){
            watchdog('force_mailgun', 'Mailgun API service down. Mail added to queue. Please wait and try again.');
        }else{
            watchdog('force_mailgun', 'Failed to create Mailgun Client. Mail added to queue. Please wait and try again.');
        }
        return FALSE;
    }

    // Merge the $mailgun_message array with options.
    $mailgun_message += $mailgun_message['params'];
    unset($mailgun_message['params']);

    // Retrieve a list of available domains first.
    $domains = array();
    try {
        $result = $client->get('domains');
        if ($result->http_response_code == 200) {
            foreach ($result->http_response_body->items as $item) {
                $domains[$item->name] = $item->name;
            }
        }
        else {
            watchdog('mailgun', 'Mailgun server returned a %code error. Could not retrieve domain list.', array('%code' => $result->http_response_code), WATCHDOG_ERROR);
        }
    } catch (Exception $e) {
        watchdog('mailgun', 'An exception occurred while retrieving domains. @code: @message', array('@code' => $e->getCode(), '@message' => $e->getMessage()), WATCHDOG_ERROR);
    }

    if (empty($domains)) {
        // No domain available. Although this shouldn't happen, doesn't hurt to check.
        return FALSE;
    }

    // Now, we need to get the working domain. This is generally the domain the From address is on or the root domain of it.
    if ($key = array_search($mail_domain, $domains) !== FALSE) {
        // Great. Found it.
        $working_domain = $mail_domain;
    }
    else {
        // Oops. No match. Perhaps it's a subdomain instead.
        foreach ($domains as $domain) {
            if (strpos($domain, $mail_domain) !== FALSE) {
                // Got it.
                $working_domain = $domain;
                break;
            }
        }
    }

    // There is a chance that the user is attempting to send from an email address that's on a domain not yet added to the Mailgun account.
    // In that case, abort sending and report error.
    if (empty($working_domain)) {
        watchdog('mailgun', 'Unable to locate a working domain for From address %mail. Aborting sending.', array('%mail' => $mailgun_message['from']), WATCHDOG_ERROR);
        return FALSE;
    }

    try {
        if (!empty($mailgun_message['attachments'])) {
            // Send message with attachments.
            $attachments = $mailgun_message['attachments'];
            unset($mailgun_message['attachments']);
            $result = $client->sendMessage($working_domain, $mailgun_message, array('attachment' => $attachments));
        }
        else {
            // Just good old mail with no attachment.
            $result = $client->sendMessage($working_domain, $mailgun_message);
        }

        // For a list of HTTP response codes, see: https://documentation.mailgun.com/api-intro.html#errors.
        if ($result->http_response_code == 200) {
            if (variable_get('mailgun_log', FALSE)) {
                watchdog('mailgun', 'Successfully sent message from %from to %to. %code: %message.', array('%from' => $mailgun_message['from'], '%to' => $mailgun_message['to'], '%code' => $result->http_response_code, '%message' => $result->http_response_body->message));
            }
            return TRUE;
        }
        else {
            watchdog('mailgun', 'Failed to send message from %from to %to. %code: %message.', array('%from' => $mailgun_message['from'], '%to' => $mailgun_message['to'], '%code' => $result->http_response_code, '%message' => $result->http_response_body->message), WATCHDOG_ERROR);
            return FALSE;
        }
    } catch (Exception $e) {
        watchdog('mailgun', 'Exception occurred while trying to send test email from %from to %to. @code: @message.', array('%from' => $mailgun_message['from'], '%to' => $mailgun_message['to'], '@code' => $e->getCode(), '@message' => $e->getMessage()));
    }
}